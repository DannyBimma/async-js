// API URL change - https://restcountries.com/v2/

Asynchronous JavaScript:
Normally, a given program's code runs straight along, with only one thing happening at once. If a function relies on the result of another function, it has to wait for the other function to finish and return, and until that happens, the entire program is essentially stopped from the perspective of the user.

Mac users, for example, sometimes experience this as the spinning rainbow-colored cursor (or "beachball" as it is often called). This cursor is how the operating system says "the current program you're using has had to stop and wait for something to finish up, and it's taking so long that I was worried you'd wonder what was going on."

This is a frustrating experience and isn't a good use of computer processing power ‚Äî especially in an era in which computers have multiple processor cores available. There's no sense sitting there waiting for something when you could let the other task chug along on another processor core and let you know when it's done. This lets you get other work done in the meantime, which is the basis of asynchronous programming. It is up to the programming environment you are using (web browsers, in the case of web development) to provide you with APIs that allow you to run such tasks asynchronously. 
Asynchronous techniques are very useful, particularly in web programming. When a web app runs in a browser and it executes an intensive chunk of code without returning control to the browser, the browser can appear to be frozen. This is called blocking; the browser is blocked from continuing to handle user input and perform other tasks until the web app returns control of the processor.

AJAX Calls:
JavaScript has multiple ways of making AJAX calls, and one of the most old school ways is through the XML-HTTP-Request function. It works by basically storing the result of the function call into a variable. Next, you will need the URL to which you will be making the AJAX call. This is done by calling the open method on the object created by the XML-HTTP-Request function. The open method then accepts two parameters, the first is the type of request, and the second is a string containing the URL to which the AJAX call is to be made. The string containing the AJAX call URL is also known as the API endpoint. After that the request just need to be sent by calling the send method on the object created by the XML-HTTP-Request function.

Avoiding Callback Hell:
When making multiple AJAX calls, the asynchronous nature of them will require certain steps to be taken in order to control the way the data is received back from the server. Since it happens asynchronously there's no telling which request will come back first in a series of request. But there's a way to create a sequence of AJAX calls so the second one only runs once the first one has finished. One way to do this is be nesting event listeners, meaning each new event listener will have to wait for the load event to complete before executing their code and moving on to the next one. Implementing a sequence of AJAX calls like this can be essential to the proper running of your program if data needed from one AJAX call is dependant on data coming from another. The major problem is, the more AJAX calls you have to make this way, the deeper your nested event listeners will go. This will inevitably lead to what's know as call back hell. And to avoid it, you'll need to help of promises. 

Promises and The Fetch API:
A Promise is a proxy for a value not necessarily known when the promise is created. Or to put it more simply, a promise is just a place holder for a future result (like the data coming in from an AJAX call). It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.

A Promise is in one of these states:

    pending: initial state, neither fulfilled nor rejected.
    fulfilled: meaning that the operation was completed successfully.
    rejected: meaning that the operation failed.

A pending promise can either be fulfilled with a value or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached. One of the biggest benefits to using promises instead of XML-HTTP-Requests, is no longer needing to rely on events and callbacks passed into asynchronous functions to handle asynchronous results. Another reason is the fact that events and callbacks often times cause unexpected results. Big the biggest advantage of all is the ability to chain promises for a sequence of asynchronous operations, this is how you avoid callback hell.

Chaining Promises:
The methods promise.then(), promise.catch(), and promise.finally() are used to associate further action with a promise that becomes settled.
The .then() method takes up to two arguments; the first argument is a callback function for the resolved case of the promise, and the second argument is a callback function for the rejected case. Each .then() returns a newly generated promise object, which can optionally be used for chaining.

Handling Rejected Promises:
The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). This means that you have to provide an onRejected function even if you want to fall back to an undefined result value - for example obj.catch(() => {}). 

Throwing Errors Manually:
The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate. 

Rest Countries API v3 Breaking Changes(meta):
Some things are a little broken when using v2. The promise always seems to return an ok: true  so we can't use it as a way to throw our error. Fortunately, using v3.1 of the rest countries API resolves this issue and you can follow along with the videos. So you want to use these two: https://restcountries.com/v3.1/name/ and https://restcountries.com/v3.1/alpha/

However, there are a few pieces of code that you'll need to alter to pull all the information needed correctly.

Firstly, you need to adjust your neighbour variable from const neighbour = data[0].borders[0] to const neighbour = data[0].borders. This fixes a problem where neighbour doesn't return anything (not even undefined).

Secondly, you need to adjust your neighbour getJSON to  https://restcountries.com/v3.1/alpha/${neighbour[0]} as we still only want the first country if it does exist.

Lastly we need to adjust our renderCountry function to correctly collect all the information we need to display.

    function renderCountry(data, className = "") {
      const html = `
      <article class="country ${className}">
          <img class="country__img" src="${data.flags.png}" />
          <div class="country__data">
              <h3 class="country__name">${data.name.common}</h3>
              <h4 class="country__region">${data.region}</h4>
              <p class="country__row"><span>üë´</span>${Number(
                data.population / 1000000
              ).toFixed()}M people</p>
              <p class="country__row"><span>üó£Ô∏è</span>${
                Object.values(data.languages)[0]
              }</p>
              <p class="country__row"><span>üí∞</span>${
                Object.values(data.currencies)[0].name
              }</p>
          </div>
      </article>`;
     
      countriesContainer.insertAdjacentHTML("beforeend", html);
    }


Asynchronous JS Behind the Scenes (The Event Loop):
JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.

Heap
Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory.

Queue
A JavaScript runtime uses a message queue, which is a list of messages to be processed. Each message has an associated function that gets called to handle the message.
At some point during the event loop, the runtime starts handling the messages on the queue, starting with the oldest one. To do so, the message is removed from the queue and its corresponding function is called with the message as an input parameter. As always, calling a function creates a new stack frame for that function's use.
The processing of functions continues until the stack is once again empty. Then, the event loop will process the next message in the queue (if there is one).

Never blocking
A very interesting property of the event loop model is that JavaScript, unlike a lot of other languages, never blocks. Handling I/O is typically performed via events and callbacks, so when the application is waiting for an IndexedDB query to return or an XHR request to return, it can still process other things like user input.
Legacy exceptions exist like alert or synchronous XHR, but it is considered good practice to avoid them. Beware: exceptions to the exception do exist (but are usually implementation bugs, rather than anything else).

The Event Loop in Practice:

console.log(`Event loop test commencement:`);
setTimeout(() => console.log(`0 sec timer!`), 0);
Promise.resolve(`Promise resolution #1`).then(response =>
  console.log(response)
);
console.log(`Event loop test termination`);

In the code example above (also in script.js), the lines of code won't print to the console in the order that they appear. This is due to the priority JS gives to the micro-tasks queue over the callback queue. So, the two synchronous log statements will print to the console first. Then the immediately resolved promise, and lastly the timer callback.

Promise.resolve(`Promise resolution #2`).then(response => {
  for (let i = 0; i < 888888888; i++) {}
  console.log(response);
});

And in this one, the promise will block all code in the callback queue from being pulled onto the call-stack and executed until it's micro-task is finished. 


Building a Simple Promise:
Like many other built0in objects, you can create a promise by you the new constructor keyword (new Promise). Which essentially means that a promise is just a special type of constructor. The promise constructor takes only one argument, which is called the executor function. When the promise constructor executes the executor function, it does so by passing two additional arguments which are called the resolve and reject functions. The executor function passed into the promise is the function that has the asynchronous behavior that you will have to handle with the promise. So the executor function will have to produce a result value, which will be the future value of the promise itself. When you define functionality within the executor function's block, you should call the resolve function on the result of that functionality ti fullfil the promise. And into the the resolve function, you should passed the fulfilled value of the promise so it can be consumed by the then method. So whenever value you pass into the resolve function, will be the result of the promise available to the then method.

To mark the promise as rejected you do the same. Call the reject function on result of the functionality you want to handle with the catch method. 


Promisifying the Geo-location API:
With the geo-location API's callback nature it operates in a non-blocking fashion. The getting of the users location is passed off to the web-api environment and the code continues running normally. Once the location has been got, whatever functionality you defined in the callbacks will be initiated. And so, all that is the type of JS that is ripe for promises. 
How It's Done:
You would first need to create a function that returns a new promise, and just like before, you would need to pass the executor function into the Promise constructor. And that executor function will be initiated with the resolve and reject parameters, which can be used to mark the promise as either fulfilled or rejected. 
Then you would obtain the user's location using the geo-location API and the getCurrentPosition method as per usual. As the two callbacks that the getCurrentPosition method is initiated with are user's location data upon successful retrieval, and an error if their location was for some reason blocked. You should call the resolve and reject methods that are passed into the executor function inside the success and error callbacks from the getCurrentPosition method respectively. Then you can obviously initiate them with the location and error parameters respectively as well.       

Consuming Promises with Async/Await:
More recent additions to the JavaScript language are async functions and the await keyword, added in ECMAScript 2017. These features basically act as syntactic sugar on top of promises, making asynchronous code easier to write and to read afterwards. They make async code look more like old-school synchronous code, so they're well worth learning. This article gives you what you need to know.
There are two parts to using async/await in your code. First of all we have the async keyword, which you put in front of a function declaration to turn it into an async function. An async function is a function that knows how to expect the possibility of the await keyword being used to invoke asynchronous code. So the async keyword is added to functions to tell them to return a promise rather than directly returning the value.
The await keyword.
The advantage of an async function only becomes apparent when you combine it with the await keyword. await only works inside async functions within regular JavaScript code, however it can be used on its own with JavaScript modules.
await can be put in front of any async promise-based function to pause your code on that line until the promise fulfills, then return the resulting value.
You can use await when calling any function that returns a Promise, including web API functions.


Error Handling with Try Catch:
The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown. 

try {
  nonExistentFunction();
} catch (error) {
  console.error(error);
  // expected output: ReferenceError: nonExistentFunction is not defined
  // Note - error messages will vary depending on browser
}

The try statement consists of a try-block, which contains one or more statements. {} must always be used, even for single statements. A catch-block, a finally-block, or both must be present. This gives us three forms for the try statement:


    try...catch
    try...finally
    try...catch...finally

A catch-block contains statements that specify what to do if an exception is thrown in the try-block. If any statement within the try-block (or in a function called from within the try-block) throws an exception, control is immediately shifted to the catch-block. If no exception is thrown in the try-block, the catch-block is skipped. 
The finally-block will always execute after the try-block and catch-block(s) have finished executing. It always executes, regardless of whether an exception was thrown or caught.

You can nest one or more try statements. If an inner try statement does not have a catch-block, the enclosing try statement's catch-block is used instead. 


Returning Values from Async Functions:
An async function ALWAYS return a promise, even if you explicitly define a value for an async function to return it will return a promise that will produce that value once consumed. The value that you return from an async function will become the fulfilled value of that function's promise. Meaning that once you return a value from an async function, you can handle as normal with then, catch, and finally. But that's mixing old and new conventions. To do it all with async functions, simply consume the promise using an async IIFE, with a try...catch, and await. 


Running Promises in Parallel:
If you have to make multiple calls to an api endpoint to get some series of data that don't depend on each other, you may want to make all those calls simultaneously. To do so you just need to use the Promise.all() static method in the Promise constructor. This function creates a Promise that is resolved with an array of results when all of the provided Promises resolve, or rejected when any of the Promises are rejected.

